import mongoose from "mongoose";
import dotenv from "dotenv";
import path from "path";

// Ensure dotenv is configured with the correct path
dotenv.config({ 
  path: path.resolve(process.cwd(), '.env.local') 
});

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error(
    "‚ö†Ô∏è La variable de entorno MONGODB_URI no est√° definida en .env.local\n" +
    "Aseg√∫rate de crear el archivo .env.local con la variable MONGODB_URI"
  );
}

let isConnected = false;

const connectDB = async () => {
  if (isConnected) return;

  try {
    await mongoose.connect(MONGODB_URI);
    isConnected = true;
    console.log("üì¶ Conexi√≥n a MongoDB establecida");

    // Manejadores de eventos para la conexi√≥n
    mongoose.connection.on('error', err => {
      console.error('‚ùå Error en la conexi√≥n de MongoDB:', err);
    });

    mongoose.connection.on('disconnected', () => {
      console.log('üîå Desconexi√≥n de MongoDB');
    });

    // Manejadores para cierre graceful de la aplicaci√≥n
    process.on('SIGINT', async () => {
      await disconnectDB();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      await disconnectDB();
      process.exit(0);
    });

  } catch (error) {
    console.error("‚ùå Error conectando a MongoDB:", error);
    throw error;
  }
};

const disconnectDB = async () => {
  if (!isConnected) return;

  try {
    await mongoose.disconnect();
    isConnected = false;
    console.log('üì§ Conexi√≥n a MongoDB cerrada correctamente');
  } catch (error) {
    console.error('‚ùå Error al cerrar la conexi√≥n de MongoDB:', error);
    throw error;
  }
};

export { connectDB, disconnectDB };
